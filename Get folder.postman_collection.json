{
	"info": {
		"_postman_id": "5e05f046-1e44-4e8f-9250-2b675d7f0207",
		"name": "Get folder",
		"schema": "https://schema.getpostman.com/json/collection/v2.1.0/collection.json",
		"_exporter_id": "18402597"
	},
	"item": [
		{
			"name": "PRECONDITIONS",
			"item": [
				{
					"name": "Log in and create sub-folders",
					"item": [
						{
							"name": "1. Log in by Owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get user access_token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"c_owner_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{web_basic}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{c_owner_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{c_owner_password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/oauth2/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "2. Log in by Signer",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get user access_token\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"c_signer_token\", jsonData.access_token);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "{{web_basic}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded"
									}
								],
								"body": {
									"mode": "urlencoded",
									"urlencoded": [
										{
											"key": "username",
											"value": "{{c_signer_email}}",
											"type": "text"
										},
										{
											"key": "password",
											"value": "{{c_signer_password}}",
											"type": "text"
										},
										{
											"key": "grant_type",
											"value": "password",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/oauth2/token",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"oauth2",
										"token"
									]
								}
							},
							"response": []
						},
						{
							"name": "3. Get owner folder ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Get Documents folder id\", function () {",
											"    var docsObj = jsonData.folders.find(item => item.name === \"Documents\");",
											"    pm.collectionVariables.set(\"c_owner_documents_folder_id\", docsObj.id);",
											"});",
											"",
											"pm.test(\"Get Archive folder id\", function () {",
											"    var archiveObj = jsonData.folders.find(item => item.name === \"Archive\");",
											"    pm.collectionVariables.set(\"c_owner_archive_folder_id\", archiveObj.id);",
											"});",
											"",
											"pm.test(\"Get Template folder id\", function () {",
											"    var templateObj = jsonData.folders.find(item => item.name === \"Templates\");",
											"    pm.collectionVariables.set(\"c_owner_templates_folder_id\", templateObj.id);",
											"});",
											"",
											"pm.test(\"Get Trash Bin folder id\", function () {",
											"    var trashObj = jsonData.folders.find(item => item.name === \"Trash Bin\");",
											"    pm.collectionVariables.set(\"c_owner_trash_folder_id\", trashObj.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{c_owner_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user_url}}/folder?subfolder-data=1&with_team_documents=true",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"folder"
									],
									"query": [
										{
											"key": "subfolder-data",
											"value": "1"
										},
										{
											"key": "with_team_documents",
											"value": "true"
										}
									]
								}
							},
							"response": []
						},
						{
							"name": "4. Get signer folder ids",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"var jsonData = pm.response.json();",
											"",
											"pm.test(\"Get Documents folder id\", function () {",
											"    var docsObj = jsonData.folders.find(item => item.name === \"Documents\");",
											"    pm.collectionVariables.set(\"c_signer_documents_folder_id\", docsObj.id);",
											"});",
											"",
											"pm.test(\"Get Archive folder id\", function () {",
											"    var archiveObj = jsonData.folders.find(item => item.name === \"Archive\");",
											"    pm.collectionVariables.set(\"c_signer_archive_folder_id\", archiveObj.id);",
											"});",
											"",
											"pm.test(\"Get Templates folder id\", function () {",
											"    var templateObj = jsonData.folders.find(item => item.name === \"Templates\");",
											"    pm.collectionVariables.set(\"c_signer_template_folder_id\", templateObj.id);",
											"});",
											"",
											"pm.test(\"Get Trash Bin folder id\", function () {",
											"    var trashObj = jsonData.folders.find(item => item.name === \"Trash Bin\");",
											"    pm.collectionVariables.set(\"c_signer_trash_folder_id\", trashObj.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "GET",
								"header": [
									{
										"key": "authorization",
										"value": "Bearer {{c_signer_token}}"
									},
									{
										"key": "Content-Type",
										"value": "application/x-www-form-urlencoded",
										"type": "text"
									}
								],
								"url": {
									"raw": "{{user_url}}/folder",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create Documents sub-folder for owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Documents sub-folder id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"c_owner_documents_sub_folder_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{c_owner_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"parent_id\": \"{{c_owner_documents_folder_id}}\",\n    \"name\": \"doc sub folder {{$timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user_url}}/folder",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create Archive sub-folder for owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Archive sub-folder id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"c_owner_archive_sub_folder_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{c_owner_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"parent_id\": \"{{c_owner_archive_folder_id}}\",\n    \"name\": \"archive sub folder {{$timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user_url}}/folder",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"folder"
									]
								}
							},
							"response": []
						},
						{
							"name": "5. Create Templates sub-folder for owner",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get Templates sub-folder id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"c_owner_templates_sub_folder_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "bearer {{c_owner_token}}"
									}
								],
								"body": {
									"mode": "raw",
									"raw": "{\n    \"parent_id\": \"{{c_owner_templates_folder_id}}\",\n    \"name\": \"templete sub folder {{$timestamp}}\"\n}",
									"options": {
										"raw": {
											"language": "json"
										}
									}
								},
								"url": {
									"raw": "{{user_url}}/folder",
									"host": [
										"{{user_url}}"
									],
									"path": [
										"folder"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Upload document and create template",
					"item": [
						{
							"name": "Upload template via URL",
							"event": [
								{
									"listen": "test",
									"script": {
										"exec": [
											"pm.test(\"Status code is 200\", function () {",
											"    pm.response.to.have.status(200);",
											"});",
											"",
											"pm.test(\"Get uploaded document id\", function () {",
											"    var jsonData = pm.response.json();",
											"    pm.collectionVariables.set(\"c_template_for_documents_id\", jsonData.id);",
											"});"
										],
										"type": "text/javascript"
									}
								}
							],
							"request": {
								"method": "POST",
								"header": [
									{
										"key": "Authorization",
										"value": "Bearer {{c_owner_token}}"
									}
								],
								"body": {
									"mode": "formdata",
									"formdata": [
										{
											"key": "url",
											"value": "https://drive.google.com/uc?id=1gdrY0QgCIcBzp_B3YFAhyXFjnvetDPtr&authuser=0&export=download",
											"type": "text"
										},
										{
											"key": "make_template",
											"value": "1",
											"type": "text"
										}
									]
								},
								"url": {
									"raw": "{{gateway_url}}/v2/documents/url",
									"host": [
										"{{gateway_url}}"
									],
									"path": [
										"v2",
										"documents",
										"url"
									]
								}
							},
							"response": []
						}
					]
				},
				{
					"name": "Documents and DGs in Documents folder",
					"item": [
						{
							"name": "Create signed documents and DGs",
							"item": [
								{
									"name": "Signed freeform invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 1 signed doc freeform id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_1_signed_doc_freeform\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"1 signed doc freeform\",\n    \"client_timestamp\": 1657543993,\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send a freeform invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.test(\"Get 1_signed_doc_freeform invite id\", function () {",
															"    pm.collectionVariables.set(\"c_1_signed_doc_freeform_invite_id\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cc\": [],\n    \"document_id\": \"{{1_signed_doc_freeform}}\",\n    \"from\": \"{{c_owner_email}}\",\n    \"message\": \"test\",\n    \"on_complete\": \"document_and_attachments\",\n    \"subject\": \"test\",\n    \"to\": \"{{c_signer_email}}\",\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_1_signed_doc_freeform}}/invite",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_1_signed_doc_freeform}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sign a freeform invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n        {\n            \"x\": 106,\n            \"y\": 51,\n            \"width\": 177,\n            \"height\": 54,\n            \"type\": \"signature\",\n            \"label\": \"\",\n            \"page_number\": 0,\n            \"client_timestamp\": {{$timestamp}},\n            \"role\": \"Signer 1\",\n            \"data\": \"{{c_signer_signature}}\",\n            \"signature_request_id\": \"{{c_1_signed_doc_freeform_invite_id}}\",\n            \"subtype\": \"initial\"\n        }\n    ],\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_1_signed_doc_freeform}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_1_signed_doc_freeform}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Signed field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 2 signed doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_2_signed_doc_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"2 signed doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_2_signed_doc_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_2_signed_doc_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_signer_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_2_signed_doc_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":4,\n         \"expiration_days\":8,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_2_signed_doc_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_doc_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_2_signed_doc_fieldinvite_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sign field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n        {\n            \"x\": 106,\n            \"y\": 51,\n            \"width\": 177,\n            \"height\": 54,\n            \"type\": \"signature\",\n            \"label\": \"\",\n            \"page_number\": 0,\n            \"client_timestamp\": {{$timestamp}},\n            \"role\": \"Signer 1\",\n            \"data\": \"{{c_signer_signature}}\",\n            \"field_id\": \"{{c_2_signed_doc_fieldinvite_field_request_id}}\"\n        }\n    ],\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Signed DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 3 signed doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_3_signed_doc_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"3 signed doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG1_signed\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_3_signed_doc_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG1_signed\",\n   \"folder_id\":\"{{c_owner_documents_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_3_signed_doc_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_3_signed_doc_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG1_signed_invite_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 8,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_3_signed_doc_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_DG1_signed}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_DG1_signed}}",
														"groupinvite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_3_signed_doc_from_dg_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_3_signed_doc_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_3_signed_doc_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sign document fron DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n        {\n            \"x\": 106,\n            \"y\": 51,\n            \"width\": 177,\n            \"height\": 54,\n            \"type\": \"signature\",\n            \"label\": \"\",\n            \"page_number\": 0,\n            \"client_timestamp\": {{$timestamp}},\n            \"role\": \"Signer 1\",\n            \"data\": \"{{c_signer_signature}}\",\n            \"field_id\": \"{{c_3_signed_doc_from_dg_field_request_id}}\"\n        }\n    ],\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_3_signed_doc_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_3_signed_doc_from_dg}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create waiting for me documents and DGs",
							"item": [
								{
									"name": "Waiting for me field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 4 waiting for me doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_4_waiting_for_me_doc_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"4 waiting for me doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_4_waiting_for_me_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_4_waiting_for_me_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_4_waiting_for_me_doc_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_4_waiting_for_me_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_4_waiting_for_me_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_4_waiting_for_me_doc_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_owner_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_4_waiting_for_me_doc_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":4,\n         \"expiration_days\":7,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_4_waiting_for_me_doc_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_4_waiting_for_me_doc_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Waiting for me DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 4 waitind for me doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_5_waiting_for_me_doc_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"3 signed doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG2_waiting_for_me\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_5_waiting_for_me_doc_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG2_waiting_for_me\",\n   \"folder_id\":\"{{c_owner_documents_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_5_waiting_for_me_doc_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_5_waiting_for_me_doc_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG2_waiting_for_me_invite_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 7,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_5_waiting_for_me_doc_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_DG2_waiting_for_me}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_DG2_waiting_for_me}}",
														"groupinvite"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create waiting for others documents and DGs",
							"item": [
								{
									"name": "Waiting for others freeform invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 6 waiting for others doc freeform id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_6_waiting_for_others_doc_freeform\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"6 waiting for others doc freeform\",\n    \"client_timestamp\": 1657543993,\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send a freeform invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.test(\"Get c_6_waiting_for_others_doc_freeform invite id\", function () {",
															"    pm.collectionVariables.set(\"c_6_waiting_for_others_doc_freeform_invite_id\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cc\": [],\n    \"document_id\": \"{{c_6_waiting_for_others_doc_freeform}}\",\n    \"from\": \"{{c_owner_email}}\",\n    \"message\": \"test\",\n    \"on_complete\": \"document_and_attachments\",\n    \"subject\": \"test\",\n    \"to\": \"{{c_signer_email}}\",\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_6_waiting_for_others_doc_freeform}}/invite",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_6_waiting_for_others_doc_freeform}}",
														"invite"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Waiting for others field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 7 waiting for others doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_7_waiting_for_others_doc_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"7 waiting for others doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_7_waiting_for_others_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_7_waiting_for_others_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_7_waiting_for_others_doc_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_7_waiting_for_others_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_7_waiting_for_others_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_7_waiting_for_others_doc_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_signer_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_7_waiting_for_others_doc_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":2,\n         \"expiration_days\":3,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_7_waiting_for_others_doc_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_7_waiting_for_others_doc_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Waiting for others DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 8 waiting for others doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_8_waiting_for_others_doc_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"8 waiting for others doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG3_waiting_for_others\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_8_waiting_for_others_doc_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG3_waiting_for_others\",\n   \"folder_id\":\"{{c_owner_documents_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_8_waiting_for_others_doc_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_8_waiting_for_others_doc_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG3_waiting_for_others_invite_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 3,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_8_waiting_for_others_doc_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_DG3_waiting_for_others}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_DG3_waiting_for_others}}",
														"groupinvite"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create unfinished documents and DGs",
							"item": [
								{
									"name": "Unfinished field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 9 unfinished doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_9_unfinished_doc_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"9 unfinished doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_9_unfinished_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_9_unfinished_doc_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_9_unfinished_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_9_unfinished_doc_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_owner_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_9_unfinished_doc_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":2,\n         \"expiration_days\":3,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_9_unfinished_doc_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_doc_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_9_unfinished_doc_fieldinvite_invite_id\", jsonData.field_invites[0].id);",
															"    pm.collectionVariables.set(\"c_9_unfinished_doc_fieldinvite_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_9_unfinished_doc_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_doc_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create document draft",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n       \n    ],\n    \"integration_objects\": [],\n    \"client_timestamp\": {{$timestamp}}\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_9_unfinished_doc_fieldinvite}}/field-invites/{{c_9_unfinished_doc_fieldinvite_invite_id}}/draft",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_doc_fieldinvite}}",
														"field-invites",
														"{{c_9_unfinished_doc_fieldinvite_invite_id}}",
														"draft"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unfinished DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 10 unfinished doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_10_unfinished_doc_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"10 unfinished doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG4_unfinished\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_10_unfinished_doc_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG4_unfinished\",\n   \"folder_id\":\"{{c_owner_documents_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_10_unfinished_doc_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_10_unfinished_doc_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG4_unfinished_invite_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 3,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_10_unfinished_doc_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_DG4_unfinished}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_DG4_unfinished}}",
														"groupinvite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_10_unfinished_doc_from_dg_field_invites_id\", jsonData.field_invites[0].id);",
															"    pm.collectionVariables.set(\"c_10_unfinished_doc_from_dg_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_10_unfinished_doc_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_10_unfinished_doc_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG draft",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"client_timestamp\": {{$timestamp}},\n    \"signatures\": [\n       \n    ],\n    \"attachments\": [],\n    \"checks\": [],\n    \"hyperlinks\": [],\n    \"radiobuttons\": [],\n    \"texts\": [\n        \n    ],\n    \"lines\": []\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_10_unfinished_doc_from_dg}}/field-invites/{{c_10_unfinished_doc_from_dg_field_invites_id}}/draft",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_10_unfinished_doc_from_dg}}",
														"field-invites",
														"{{c_10_unfinished_doc_from_dg_field_invites_id}}",
														"draft"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create unsent documents and DGs Copy",
							"item": [
								{
									"name": "Unsent document",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 11 unsent doc id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_11_unsent_doc\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"11 unsent doc DG\",\n    \"client_timestamp\": 1657543993,\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unsent DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 12 unsent doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_12_unsent_doc_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"12 unsent doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_DG5_unsent\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_12_unsent_doc_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG5_unsent\",\n   \"folder_id\":\"{{c_owner_documents_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Documents and DGs in Archive folder",
					"item": [
						{
							"name": "Create signed documents and DGs",
							"item": [
								{
									"name": "Signed freeform invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 1 signed doc freeform id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_1_signed_arch_freeform\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"1 signed doc freeform\",\n    \"client_timestamp\": 1657543993,\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send a freeform invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.test(\"Get 1_signed_arch_freeform invite id\", function () {",
															"    pm.collectionVariables.set(\"c_1_signed_arch_freeform_invite_id\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cc\": [],\n    \"document_id\": \"{{1_signed_arch_freeform}}\",\n    \"from\": \"{{c_owner_email}}\",\n    \"message\": \"test\",\n    \"on_complete\": \"document_and_attachments\",\n    \"subject\": \"test\",\n    \"to\": \"{{c_signer_email}}\",\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_1_signed_arch_freeform}}/invite",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_1_signed_arch_freeform}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sign a freeform invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n        {\n            \"x\": 106,\n            \"y\": 51,\n            \"width\": 177,\n            \"height\": 54,\n            \"type\": \"signature\",\n            \"label\": \"\",\n            \"page_number\": 0,\n            \"client_timestamp\": {{$timestamp}},\n            \"role\": \"Signer 1\",\n            \"data\": \"{{c_signer_signature}}\",\n            \"signature_request_id\": \"{{c_1_signed_arch_freeform_invite_id}}\",\n            \"subtype\": \"initial\"\n        }\n    ],\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_1_signed_arch_freeform}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_1_signed_arch_freeform}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move doc in Archive folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_archive_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_1_signed_arch_freeform}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_1_signed_arch_freeform}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Signed field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 2 signed doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_2_signed_arch_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"2 signed doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_2_signed_arch_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_2_signed_arch_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_signer_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_2_signed_arch_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":4,\n         \"expiration_days\":27,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_2_signed_arch_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_arch_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_2_signed_arch_fieldinvite_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sign field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n        {\n            \"x\": 106,\n            \"y\": 51,\n            \"width\": 177,\n            \"height\": 54,\n            \"type\": \"signature\",\n            \"label\": \"\",\n            \"page_number\": 0,\n            \"client_timestamp\": {{$timestamp}},\n            \"role\": \"Signer 1\",\n            \"data\": \"{{c_signer_signature}}\",\n            \"field_id\": \"{{c_2_signed_arch_fieldinvite_field_request_id}}\"\n        }\n    ],\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move doc in Archive folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_archive_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_2_signed_arch_fieldinvite}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_2_signed_arch_fieldinvite}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Signed DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 3 signed doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_3_signed_arch_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"3 signed doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG1_signed\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_3_signed_arch_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG1_signed\",\n   \"folder_id\":\"{{c_owner_archive_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_3_signed_arch_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_3_signed_arch_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG1_signed_invite_id\", jsonData.id);",
															"pm.test(\"Status code is 200, pending_invite_link is present\", function () {",
															"    pm.response.to.have.status(200);",
															"    pm.expect(pm.response.text()).to.include(\"pending_invite_link\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 30,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_3_signed_arch_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_archDG1_signed}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_archDG1_signed}}",
														"groupinvite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_3_signed_arch_from_archDG_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_3_signed_arch_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_3_signed_arch_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Sign document fron DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n        {\n            \"x\": 106,\n            \"y\": 51,\n            \"width\": 177,\n            \"height\": 54,\n            \"type\": \"signature\",\n            \"label\": \"\",\n            \"page_number\": 0,\n            \"client_timestamp\": {{$timestamp}},\n            \"role\": \"Signer 1\",\n            \"data\": \"{{c_signer_signature}}\",\n            \"field_id\": \"{{c_3_signed_arch_from_archDG_field_request_id}}\"\n        }\n    ],\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_3_signed_arch_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_3_signed_arch_from_dg}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create waiting for me documents and DGs",
							"item": [
								{
									"name": "Waiting for me field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 4 waiting for me doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_4_waiting_for_me_arch_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"4 waiting for me doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_4_waiting_for_me_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_4_waiting_for_me_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_4_waiting_for_me_arch_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_4_waiting_for_me_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_4_waiting_for_me_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_4_waiting_for_me_arch_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_owner_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_4_waiting_for_me_arch_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":4,\n         \"expiration_days\":27,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_4_waiting_for_me_arch_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_4_waiting_for_me_arch_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move doc in Archive folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_archive_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_4_waiting_for_me_arch_fieldinvite}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_4_waiting_for_me_arch_fieldinvite}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Waiting for me DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 4 waitind for me doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_5_waiting_for_me_arch_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"3 signed doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG2_waiting_for_me\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_5_waiting_for_me_arch_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG2_waiting_for_me\",\n   \"folder_id\":\"{{c_owner_archive_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_5_waiting_for_me_arch_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_5_waiting_for_me_arch_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG2_waiting_for_me_invite_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 30,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_5_waiting_for_me_arch_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_archDG2_waiting_for_me}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_archDG2_waiting_for_me}}",
														"groupinvite"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create waiting for others documents and DGs",
							"item": [
								{
									"name": "Waiting for others freeform invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 6 waiting for others doc freeform id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_6_waiting_for_others_arch_freeform\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"6 waiting for others doc freeform\",\n    \"client_timestamp\": 1657543993,\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send a freeform invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"",
															"pm.test(\"Get c_6_waiting_for_others_arch_freeform invite id\", function () {",
															"    pm.collectionVariables.set(\"c_6_waiting_for_others_arch_freeform_invite_id\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"cc\": [],\n    \"document_id\": \"{{c_6_waiting_for_others_arch_freeform}}\",\n    \"from\": \"{{c_owner_email}}\",\n    \"message\": \"test\",\n    \"on_complete\": \"document_and_attachments\",\n    \"subject\": \"test\",\n    \"to\": \"{{c_signer_email}}\",\n    \"client_timestamp\": {{$timestamp}}\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_6_waiting_for_others_arch_freeform}}/invite",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_6_waiting_for_others_arch_freeform}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move doc in Archive folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_archive_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_6_waiting_for_others_arch_freeform}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_6_waiting_for_others_arch_freeform}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Waiting for others field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 7 waiting for others doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_7_waiting_for_others_arch_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"7 waiting for others doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_7_waiting_for_others_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_7_waiting_for_others_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_7_waiting_for_others_arch_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_7_waiting_for_others_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_7_waiting_for_others_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_7_waiting_for_others_arch_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_signer_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_7_waiting_for_others_arch_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":4,\n         \"expiration_days\":27,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_7_waiting_for_others_arch_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_7_waiting_for_others_arch_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move doc in Archive folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_archive_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_7_waiting_for_others_arch_fieldinvite}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_7_waiting_for_others_arch_fieldinvite}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Waiting for others DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 8 waiting for others doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_8_waiting_for_others_arch_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"8 waiting for others doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG3_waiting_for_others\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_8_waiting_for_others_arch_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG3_waiting_for_others\",\n   \"folder_id\":\"{{c_owner_archive_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_8_waiting_for_others_arch_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_8_waiting_for_others_arch_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG3_waiting_for_others_invite_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 30,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_signer_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_8_waiting_for_others_arch_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_archDG3_waiting_for_others}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_archDG3_waiting_for_others}}",
														"groupinvite"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create unfinished documents and DGs",
							"item": [
								{
									"name": "Unfinished field invite",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 9 unfinished doc field invite id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_9_unfinished_arch_fieldinvite\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"9 unfinished doc field invite\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_9_unfinished_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get role id",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_9_unfinished_arch_fieldinvite_role_id\", jsonData.roles[0].unique_id);"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_9_unfinished_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send field invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status success\", function() {",
															"    pm.expect(pm.response.text()).to.include(\"success\");",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_id\":\"{{c_9_unfinished_arch_fieldinvite}}\",\n   \"to\":[\n      {\n         \n         \"email\":\"{{c_owner_email}}\",\n         \"role\":\"Signer 1\",\n         \"role_id\":\"{{c_9_unfinished_arch_fieldinvite_role_id}}\",\n         \"order\":1,\n         \"reassign\":\"0\",\n         \"decline_by_signature\":\"0\",\n         \"reminder\":4,\n         \"expiration_days\":27,\n         \"subject\":\"Signer1. Test field invite\",\n         \"message\":\"Test\"\n      }\n   ],\n   \"from\":\"{{c_owner_email}}\",\n   \"cc\":[\n   ],\n   \"subject\":\"Test field invite\",\n   \"message\":\"Test {{$timestamp}}\",\n   \"on_complete\":\"document_and_attachments\"\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_9_unfinished_arch_fieldinvite}}/invite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_arch_fieldinvite}}",
														"invite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_9_unfinished_arch_fieldinvite_invite_id\", jsonData.field_invites[0].id);",
															"    pm.collectionVariables.set(\"c_9_unfinished_arch_fieldinvite_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_9_unfinished_arch_fieldinvite}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_arch_fieldinvite}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create document draft",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"signatures\": [\n       \n    ],\n    \"integration_objects\": [],\n    \"client_timestamp\": {{$timestamp}}\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_9_unfinished_arch_fieldinvite}}/field-invites/{{c_9_unfinished_arch_fieldinvite_invite_id}}/draft",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_arch_fieldinvite}}",
														"field-invites",
														"{{c_9_unfinished_arch_fieldinvite_invite_id}}",
														"draft"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move doc in Archive folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_archive_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_9_unfinished_arch_fieldinvite}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_9_unfinished_arch_fieldinvite}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unfinished DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 10 unfinished doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_10_unfinished_arch_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"10 unfinished doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG4_unfinished\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_10_unfinished_arch_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG4_unfinished\",\n   \"folder_id\":\"{{c_owner_archive_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										},
										{
											"name": "Add fields to document from DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 201\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"texts\":[],\n   \"signatures\":[],\n   \"checks\":[],\n   \"radiobuttons\":[],\n   \"attachments\":[],\n   \"client_timestamp\":{{$timestamp}},\n   \"fields\":[\n      {\n         \"page_number\":0,\n         \"role\":\"Signer 1\",\n         \"type\":\"signature\",\n         \"custom_defined_option\":false,\n         \"name\":\"s1_sign\",\n         \"required\":true,\n         \"width\":122,\n         \"height\":34,\n         \"x\":88,\n         \"y\":15\n      }\n   ]\n}"
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_10_unfinished_arch_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_10_unfinished_arch_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Send DG invite",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG4_unfinished_invite_id\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"invite_steps\": [\n        {\n            \"order\": 1,\n            \"invite_emails\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"subject\": \"custom subject\",\n                    \"message\": \"custom message\",\n                    \"expiration_days\": 30,\n                    \"reminder\": 0\n                }\n            ],\n            \"invite_actions\": [\n                {\n                    \"email\": \"{{c_owner_email}}\",\n                    \"role_name\": \"Signer 1\",\n                    \"action\": \"sign\",\n                    \"document_id\": \"{{c_10_unfinished_arch_from_dg}}\",\n                    \"allow_reassign\": \"1\",\n                    \"decline_by_signature\": \"0\"\n                }\n            ]\n        }\n    ],\n    \"completion_emails\": [], \n    \"sign_as_merged\": false\n}"
												},
												"url": {
													"raw": "{{flow_url}}/documentgroup/{{c_archDG4_unfinished}}/groupinvite",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"documentgroup",
														"{{c_archDG4_unfinished}}",
														"groupinvite"
													]
												}
											},
											"response": []
										},
										{
											"name": "Get document info",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"let jsonData = pm.response.json();",
															"pm.test(\"Get invite id\", function () {",
															"    pm.collectionVariables.set(\"c_10_unfinished_arch_from_archDG_field_invites_id\", jsonData.field_invites[0].id);",
															"    pm.collectionVariables.set(\"c_10_unfinished_arch_from_archDG_field_request_id\", jsonData.fields[0].field_request_id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/document/{{c_10_unfinished_arch_from_dg}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_10_unfinished_arch_from_dg}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG draft",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"client_timestamp\": {{$timestamp}},\n    \"signatures\": [\n       \n    ],\n    \"attachments\": [],\n    \"checks\": [],\n    \"hyperlinks\": [],\n    \"radiobuttons\": [],\n    \"texts\": [\n        \n    ],\n    \"lines\": []\n}"
												},
												"url": {
													"raw": "{{flow_url}}/document/{{c_10_unfinished_arch_from_dg}}/field-invites/{{c_10_unfinished_arch_from_archDG_field_invites_id}}/draft",
													"host": [
														"{{flow_url}}"
													],
													"path": [
														"document",
														"{{c_10_unfinished_arch_from_dg}}",
														"field-invites",
														"{{c_10_unfinished_arch_from_archDG_field_invites_id}}",
														"draft"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Create unsent documents and DGs",
							"item": [
								{
									"name": "Unsent document",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 11 unsent doc id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_11_unsent_arch\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"11 unsent doc\",\n    \"client_timestamp\": 1657543993,\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move doc in Archive folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_archive_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/document/{{c_11_unsent_arch}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"document",
														"{{c_11_unsent_arch}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Unsent DG",
									"item": [
										{
											"name": "Create copy from template",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get 12 unsent doc from DG id\", function () {",
															"    var jsonData = JSON.parse(responseBody);",
															"    pm.collectionVariables.set(\"c_12_unsent_arch_from_dg\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "application/json"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"document_name\": \"12 unsent doc DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
												},
												"url": {
													"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
													"host": [
														"{{mw_gateway_url}}"
													],
													"path": [
														"template",
														"{{c_template_for_documents_id}}",
														"copy"
													]
												}
											},
											"response": []
										},
										{
											"name": "Create DG",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"var jsonData = JSON.parse(responseBody);",
															"pm.collectionVariables.set(\"c_archDG5_unsent\", jsonData.id);",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Content-Type",
														"value": "application/json"
													},
													{
														"key": "Authorization",
														"value": "bearer {{c_owner_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n   \"document_ids\":[\n      \"{{c_12_unsent_arch_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG5_unsent\",\n   \"folder_id\":\"{{c_owner_archive_folder_id}}\"\n}\n"
												},
												"url": {
													"raw": "{{gateway_url}}/documentgroup",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"documentgroup"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "Templates in Templates folder",
					"item": [
						{
							"name": "Create templates",
							"item": [
								{
									"name": "Upload template via URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get uploaded document id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"c_template_2_id\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "url",
													"value": "https://drive.google.com/uc?id=1gdrY0QgCIcBzp_B3YFAhyXFjnvetDPtr&authuser=0&export=download",
													"type": "text"
												},
												{
													"key": "make_template",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/v2/documents/url",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload template via URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get uploaded document id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"c_template_3_id\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "url",
													"value": "https://drive.google.com/uc?id=1gdrY0QgCIcBzp_B3YFAhyXFjnvetDPtr&authuser=0&export=download",
													"type": "text"
												},
												{
													"key": "make_template",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/v2/documents/url",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rename template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"3 template\",\n    \"client_timestamp\": {{$timestamp}}\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/v2/documents/{{c_template_3_id}}",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"{{c_template_3_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rename template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"2 template\",\n    \"client_timestamp\": {{$timestamp}}\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/v2/documents/{{c_template_2_id}}",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"{{c_template_2_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rename template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"1 template\",\n    \"client_timestamp\": {{$timestamp}}\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/v2/documents/{{c_template_for_documents_id}}",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"{{c_template_for_documents_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Documents and DGs in Trash folder",
					"item": [
						{
							"name": "Create templates in Trash",
							"item": [
								{
									"name": "Upload template via URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get uploaded document id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"c_template_4_trash_id\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "url",
													"value": "https://drive.google.com/uc?id=1gdrY0QgCIcBzp_B3YFAhyXFjnvetDPtr&authuser=0&export=download",
													"type": "text"
												},
												{
													"key": "make_template",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/v2/documents/url",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rename template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"1 template trash\",\n    \"client_timestamp\": {{$timestamp}}\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/v2/documents/{{c_template_4_trash_id}}",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"{{c_template_4_trash_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Upload template via URL",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get uploaded document id\", function () {",
													"    var jsonData = pm.response.json();",
													"    pm.collectionVariables.set(\"c_template_5_trash_id\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "formdata",
											"formdata": [
												{
													"key": "url",
													"value": "https://drive.google.com/uc?id=1gdrY0QgCIcBzp_B3YFAhyXFjnvetDPtr&authuser=0&export=download",
													"type": "text"
												},
												{
													"key": "make_template",
													"value": "1",
													"type": "text"
												}
											]
										},
										"url": {
											"raw": "{{gateway_url}}/v2/documents/url",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"url"
											]
										}
									},
									"response": []
								},
								{
									"name": "Rename template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"2 template trash\",\n    \"client_timestamp\": {{$timestamp}}\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/v2/documents/{{c_template_5_trash_id}}",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"v2",
												"documents",
												"{{c_template_5_trash_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move doc in Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_template_4_trash_id}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_template_4_trash_id}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move doc in Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_template_5_trash_id}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_template_5_trash_id}}",
												"move"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create documents in Trash",
							"item": [
								{
									"name": "Create copy from template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get 11 unsent doc id\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.collectionVariables.set(\"c_1_unsent_trash\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"11 unsent doc\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"template",
												"{{c_template_for_documents_id}}",
												"copy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create copy from template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get 12 unsent doc id\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.collectionVariables.set(\"c_2_unsent_trash\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"12 unsent doc\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"template",
												"{{c_template_for_documents_id}}",
												"copy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move doc in Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_1_unsent_trash}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_1_unsent_trash}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move doc in Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_2_unsent_trash}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_2_unsent_trash}}",
												"move"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Create DGs in Trash",
							"item": [
								{
									"name": "Create copy from template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get 3 unsent doc from DG id\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.collectionVariables.set(\"c_3_unsent_trash_from_dg\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"3 unsent trash DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"template",
												"{{c_template_for_documents_id}}",
												"copy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.collectionVariables.set(\"c_trashDG6_unsent\", jsonData.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"document_ids\":[\n      \"{{c_3_unsent_trash_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG6_unsent\",\n   \"folder_id\":\"{{c_owner_trash_folder_id}}\"\n}\n"
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create copy from template",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"pm.test(\"Get 4 unsent doc from DG id\", function () {",
													"    var jsonData = JSON.parse(responseBody);",
													"    pm.collectionVariables.set(\"c_4_unsent_trash_from_dg\", jsonData.id);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/json"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"document_name\": \"4 unsent trash DG\",\n    \"client_timestamp\": {{$timestamp}},\n    \"template_id\": \"{{c_template_for_documents_id}}\"\n}"
										},
										"url": {
											"raw": "{{mw_gateway_url}}/template/{{c_template_for_documents_id}}/copy",
											"host": [
												"{{mw_gateway_url}}"
											],
											"path": [
												"template",
												"{{c_template_for_documents_id}}",
												"copy"
											]
										}
									},
									"response": []
								},
								{
									"name": "Create DG",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = JSON.parse(responseBody);",
													"pm.collectionVariables.set(\"c_trashDG7_unsent\", jsonData.id);",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Content-Type",
												"value": "application/json"
											},
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n   \"document_ids\":[\n      \"{{c_4_unsent_trash_from_dg}}\"\n   ],\n   \"group_name\":\"c_DG7_unsent\",\n   \"folder_id\":\"{{c_owner_trash_folder_id}}\"\n}\n"
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "entity_type parameter",
			"item": [
				{
					"name": "entity_type parameter for Sender",
					"item": [
						{
							"name": "Documents folder(Archive is the same)",
							"item": [
								{
									"name": "entity_type = all for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
													"});",
													"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
													"});",
													"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
													"});",
													"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
													"});",
													"",
													"",
													"let docSchema = {",
													"  \"type\": \"object\",",
													"  \"properties\": {",
													"    \"id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"    \"user_id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"    \"document_name\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 250},",
													"    \"pinned\": {\"type\": \"boolean\"},",
													"    \"is_favorite\": {\"type\": \"boolean\"},",
													"    \"page_count\": {\"type\": \"string\", \"pattern\": \"^[1-9][0-9]*$\"},",
													"    \"created\": {\"type\": \"string\", \"pattern\": \"^[0-9]{10}\"},",
													"    \"updated\": {\"type\": \"string\", \"pattern\": \"^[0-9]{10}\"},",
													"    \"original_filename\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 250},",
													"    \"owner\": { \"type\": \"string\", \"pattern\": \"^(?!.*@.*@).*$\" },",
													"    \"version_time\": {\"type\": \"string\", \"pattern\": \"^[0-9]{10}\"},",
													"    \"template\": {\"type\": \"boolean\"},",
													"    \"origin_document_id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"    \"origin_user_id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"    \"thumbnail\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"small\": {\"type\": \"string\"},",
													"        \"medium\": {\"type\": \"string\"},",
													"        \"large\": {\"type\": \"string\"}",
													"      },",
													"      \"required\": [\"small\", \"medium\", \"large\"]",
													"    },",
													"    \"signatures\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"seals\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"texts\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"checks\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"inserts\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"tags\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"fields\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"requests\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"notary_invites\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"field_invites\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"viewer_field_invites\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"enumeration_options\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"attachments\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"routing_details\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"roles\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"viewer_roles\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"radiobuttons\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"integrations\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"document_group_info\": {",
													"      \"type\": \"object\",",
													"      \"properties\": {",
													"        \"document_group_id\": {\"type\": \"null\"},",
													"        \"document_group_name\": {\"type\": \"null\"},",
													"        \"invite_id\": {\"type\": \"null\"},",
													"        \"invite_status\": {\"type\": \"null\"},",
													"        \"doc_count_in_group\": {\"type\": \"integer\"},",
													"        \"sign_as_merged\": {\"type\": \"boolean\"}",
													"      },",
													"      \"required\": [\"document_group_id\", \"document_group_name\", \"invite_id\", \"invite_status\", \"doc_count_in_group\", \"sign_as_merged\"]",
													"    },",
													"    \"settings\": {\"type\": \"object\"}, //don't check parameter from settings object",
													"    \"recently_used\": {\"type\": \"string\"},",
													"    \"parent_id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"    \"originator_organization_settings\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"document_group_template_info\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    },",
													"    \"field_validators\": {",
													"      \"type\": \"array\",",
													"      \"items\": {}",
													"    }",
													"  },",
													"  \"required\": [\"id\", \"user_id\", \"document_name\", \"pinned\", \"is_favorite\", \"page_count\", \"created\", \"updated\", \"original_filename\", \"owner\", \"version_time\", \"template\", \"origin_document_id\", \"origin_user_id\", \"thumbnail\", \"signatures\", \"seals\", \"texts\", \"checks\", \"inserts\", \"tags\", \"fields\", \"requests\", \"notary_invites\", \"field_invites\", \"viewer_field_invites\", \"enumeration_options\", \"attachments\", \"routing_details\",\"roles\", \"viewer_roles\", \"radiobuttons\", \"integrations\", \"document_group_info\", \"settings\", \"recently_used\", \"parent_id\", \"originator_organization_settings\", \"document_group_template_info\", \"field_validators\"]",
													"}",
													"",
													"let dgSchema = {",
													"\t\t\"type\": \"object\",",
													"\t\t\"properties\": {",
													"\t\t\t\"id\": { \"type\": \"string\", \"minLength\": 40, \"maxLength\": 40 },",
													"\t\t\t\"user_id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"            \"document_group_name\" : {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 250},",
													"\t\t\t\"pinned\": {\"type\": \"boolean\"},",
													"\t\t\t\"is_favorite\": {\"type\": \"boolean\"},",
													"\t\t\t\"created\": {\"type\": \"integer\", \"pattern\": \"^[0-9]{10}\"},",
													"\t\t\t\"updated\": {\"type\": \"integer\", \"pattern\": \"^[0-9]{10}\"},",
													"\t\t\t\"owner\": { \"type\": \"string\", \"pattern\": \"^(?!.*@.*@).*$\" },",
													"\t\t\t\"invite_id\": {\"type\": [\"string\", \"null\"]},",
													"\t\t\t\"documents\": {",
													"\t\t\t\t\"type\": \"array\",",
													"\t\t\t\t\"items\": {",
													"\t\t\t\t\t\"type\": \"object\",",
													"\t\t\t\t\t\"properties\": {",
													"\t\t\t\t\t\t\"id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"\t\t\t\t\t\t\"name\": {\"type\": \"string\", \"minLength\": 2, \"maxLength\": 250},",
													"\t\t\t\t\t\t\"roles\": {",
													"\t\t\t\t\t\t\t\"type\": \"array\",",
													"\t\t\t\t\t\t\t\"items\": {",
													"\t\t\t\t\t\t\t\t\"items\": {}",
													"\t\t\t\t\t\t\t}",
													"\t\t\t\t\t\t}",
													"\t\t\t\t\t},",
													"\t\t\t\t\t\"required\": [\"id\",\"name\",\"roles\"]",
													"\t\t\t\t}",
													"\t\t\t},",
													"\t\t\t\"recently_used\": {\"type\": \"integer\", \"pattern\": \"^[0-9]{10}\"},",
													"\t\t\t\"status\": {\"type\": \"string\"},",
													"\t\t\t\"invites\": {",
													"\t\t\t\t\"type\": \"array\",",
													"\t\t\t\t\"items\": {",
													"\t\t\t\t\t\"items\": {}",
													"\t\t\t\t}",
													"\t\t\t},",
													"\t\t\t\"parent_id\": {\"type\": \"string\", \"minLength\": 40, \"maxLength\": 40},",
													"\t\t\t\"sign_as_merged\": {\"type\": \"boolean\"},",
													"\t\t\t\"originator_organization_settings\": {",
													"\t\t\t\t\"type\": \"array\",",
													"\t\t\t\t\"items\": {",
													"\t\t\t\t\t\"items\": {}",
													"\t\t\t\t}",
													"\t\t\t}",
													"\t\t},",
													"\t\t\"required\": [\"id\", \"user_id\", \"document_group_name\", \"pinned\", \"is_favorite\", \"created\", \"updated\", \"owner\", \"invite_id\", \"documents\", \"recently_used\", \"status\", \"invites\", \"parent_id\",\"sign_as_merged\", \"originator_organization_settings\"]",
													"}",
													"",
													"/////////////////////////////////////////////////////////////////////////////////////////////////////////",
													"////////////////////////////LOOP ITERATES OVER THE ENTIRE RESPONSE///////////////////////////////////////",
													"/////////////////////////////////////////////////////////////////////////////////////////////////////////",
													"////////////////////////////In response looking for documents and DG:////////////////////////////////////",
													"//////////////////////ordinary documents (+ different statuses of documents)/////////////////////////////",
													"///old beliver document (a document that has information about the DG in the response and is an owner)///",
													"/////////////////////DG single lists(in responce returns as DG of single list)///////////////////////////",
													"////////////////and the scheme is checked in the response(WITHOUT settings object)///////////////////////",
													"/////////////////////////////////////////////////////////////////////////////////////////////////////////",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"   ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \".1\" + \") Schema for Document '\" + documentName + \"'\", () => {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.jsonSchema(docSchema);",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \".1\" + \") Schema for Document from old_believers'\" + documentName + \"'\", () => {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.jsonSchema(docSchema);",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \".1\" + \") Schema for Document for SIGNERS doc'\" + documentName + \"'\", () => {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.jsonSchema(docSchema);",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"        });",
													"       ",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \".1\" + \") Schema for DG '\" + dgName + \"'\", () => {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.jsonSchema(dgSchema);",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=all",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "all"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG2_waiting_for_me is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
													"});",
													"pm.test(\"c_5_waiting_for_me_doc_from_dg is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is notinclude in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG4_unfinished is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
													"});",
													"pm.test(\"c_10_unfinished_doc_from_dg is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
													"});",
													"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
													"});",
													"//",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');",
													"",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            //assert.fail is needed to check for the absence of a DG when filtering by entity_type=document",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=document",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document-group for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
													"});",
													"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_9_unfinished_doc_fieldinvite is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
													"});",
													"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
													"});",
													"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
													"});",
													"//",
													"",
													"var assert = require('assert');",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"",
													"            //assert.fail is needed to check for the absence of a DOCUMENT when filtering by entity_type=document-group",
													"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"",
													"            //assert.fail is needed to check for the absence of a DOCUMENT when filtering by entity_type=document-group",
													"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"            ",
													"            //assert.fail is needed to check for the absence of a DOCUMENT when filtering by entity_type=document-group",
													"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=document-group",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document-group"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document-all for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
													"});",
													"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
													"});",
													"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
													"});",
													"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
													"});",
													"//",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');    ",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            //assert.fail is needed to check for the absence of a DG when filtering by entity_type=document-all",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=document-all",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document-all"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type is absent = default value(document-all) for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
													"});",
													"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
													"});",
													"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
													"});",
													"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
													"});",
													"//",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            //assert.fail is needed to check for the absence of a DG when filtering by entity_type absence",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = STRING for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\"); ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										},
										{
											"listen": "prerequest",
											"script": {
												"exec": [
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type={{i}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "{{i}}"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = INTEGER for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\"); ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 0 for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    // pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(65536));",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"    ",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=0",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = DOUBLE for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    // pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(65536));",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"    ",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=1.1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(true) for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    // pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(65536));",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"    ",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=true",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(false) for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    // pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(65536));",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"    ",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=false",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = null for Doc root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    // pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(65536));",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"    ",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=null",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 'empty' for Doc root Sender Copy",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    // pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(65536));",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"    ",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"    ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Documents sub-folder (Archive sub-folder is the same)",
							"item": [
								{
									"name": "PRECONDITION - MOVE DOC AND DG TO SUB-FOLDER",
									"item": [
										{
											"name": "Move all documents from Documents folder to Trash folder Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_4_waiting_for_me_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_9_unfinished_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_11_unsent_doc}}\"\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}/documents",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}",
														"documents"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG1_signed in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_sub_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG1_signed}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG1_signed}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG2_waiting_for_me in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_sub_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG2_waiting_for_me}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG2_waiting_for_me}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG3_waiting_for_others in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_sub_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG3_waiting_for_others}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG3_waiting_for_others}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG4_unfinished in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_sub_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG4_unfinished}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG4_unfinished}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG5_unsent in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_sub_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG5_unsent}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG5_unsent}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Check entity-type parametr in sub-folder",
									"item": [
										{
											"name": "entity_type = all for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is notinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);  ",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");  ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"    ",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");   ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);   ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"    ",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");   ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);   ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");  ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"65536 code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);  ",
															"});",
															"//Check error message ",
															"pm.test(\"Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");  ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);  ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");  ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400); ",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"});",
															"",
															"//Check error code",
															"pm.test(\"65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"});",
															"",
															"//Check error message ",
															"pm.test(\"Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"});",
															"",
															"//Check error code",
															"pm.test(\"65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"});",
															"",
															"//Check error message ",
															"pm.test(\"Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Doc sub-folder Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"});",
															"",
															"//Check error code",
															"pm.test(\"65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"});",
															"",
															"//Check error message ",
															"pm.test(\"Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_sub_folder_id}}?entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POSTCONDITION - MOVE DOC AND DG TO DOCUMENT ROOT FOLDER",
									"item": [
										{
											"name": "Move all documents from Documents folder to Trash folder Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_4_waiting_for_me_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_9_unfinished_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_11_unsent_doc}}\"\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}/documents",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}",
														"documents"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG1_signed in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG1_signed}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG1_signed}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG2_waiting_for_me in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG2_waiting_for_me}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG2_waiting_for_me}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG3_waiting_for_others in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG3_waiting_for_others}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG3_waiting_for_others}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG4_unfinished in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG4_unfinished}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG4_unfinished}}",
														"move"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move c_DG5_unsent in Document sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 204\", function () {",
															"    pm.response.to.have.status(204);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_owner_token}}"
													},
													{
														"key": "Content-Type",
														"value": "multipart/form-data",
														"disabled": true
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"folder_id\": \"{{c_owner_documents_folder_id}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/v2/document-groups/{{c_DG5_unsent}}/move",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"v2",
														"document-groups",
														"{{c_DG5_unsent}}",
														"move"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Templates folder",
							"item": [
								{
									"name": "entity_type = all for Template root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_template_for_documents_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_for_documents_id\"));",
													"});",
													"",
													"pm.test(\"c_template_2_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_2_id\"));",
													"});",
													"",
													"pm.test(\"c_template_3_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_3_id\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=all",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "all"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document for Template root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_template_for_documents_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_for_documents_id\"));",
													"});",
													"",
													"pm.test(\"c_template_2_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_2_id\"));",
													"});",
													"",
													"pm.test(\"c_template_3_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_3_id\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=document",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document-group for Template root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_template_for_documents_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_for_documents_id\"));",
													"});",
													"",
													"pm.test(\"c_template_2_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_2_id\"));",
													"});",
													"",
													"pm.test(\"c_template_3_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_3_id\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"            // assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"            // assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");z",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"            // assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=document-group",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document-group"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document-all for Template root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_template_for_documents_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_for_documents_id\"));",
													"});",
													"",
													"pm.test(\"c_template_2_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_2_id\"));",
													"});",
													"",
													"pm.test(\"c_template_3_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_3_id\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=document-all",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document-all"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type is empty = default value(document-all) for Template root Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_template_for_documents_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_for_documents_id\"));",
													"});",
													"",
													"pm.test(\"c_template_2_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_2_id\"));",
													"});",
													"",
													"pm.test(\"c_template_3_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_3_id\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    var assert = require('assert');",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = STRING for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=test",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = INTEGER for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 0 for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=0",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = DOUBLE for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=1.1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(true) for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=true",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(false) for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");  ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=false",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = null for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");  ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=null",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 'empty' for Templates Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_templates_folder_id}}?entity_type=",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Trash folder",
							"item": [
								{
									"name": "entity_type = all for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"",
													"//DG and doc",
													"pm.test(\"c_trashDG7_unsent is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_trashDG7_unsent\"));",
													"});",
													"pm.test(\"c_4_unsent_trash_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_unsent_trash_from_dg\"));",
													"});",
													"//",
													"",
													"//DG and doc",
													"pm.test(\"c_trashDG6_unsent is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_trashDG6_unsent\"));",
													"});",
													"pm.test(\"c_3_unsent_trash_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_unsent_trash_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_2_unsent_trash is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_unsent_trash\"));",
													"});",
													"",
													"pm.test(\"c_1_unsent_trash is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_unsent_trash\"));",
													"});",
													"",
													"pm.test(\"c_template_5_trash_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_5_trash_id\"));",
													"});",
													"",
													"pm.test(\"c_template_4_trash_id is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_template_4_trash_id\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}?entity_type=all",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "all"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = STRING for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"    ",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}?entity_type=test",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = INTEGER for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}?entity_type=1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 0 for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}?entity_type=0",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = DOUBLE for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400); ",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=1.1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(true) for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}?entity_type=true",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(false) for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}?entity_type=false",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = null for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{c_owner_trash_folder_id}}?entity_type=null",
											"host": [
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 'empty' for Trash Sender",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"});",
													"",
													"//Check error code",
													"pm.test(\"65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"});",
													"",
													"//Check error message ",
													"pm.test(\"Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}?entity_type=",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Quick Access",
							"item": [
								{
									"name": "Waiting for me",
									"item": [
										{
											"name": "entity_type = all for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"",
															"//Check include doc and DG in GET /folder responce",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"",
															"//Check include doc and DG in GET /folder responce",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"",
															"//Check include doc and DG in GET /folder responce",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"",
															"",
															"//Check include doc and DG in GET /folder responce",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Waiting for me Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Waiting for others",
									"item": [
										{
											"name": "entity_type = all for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Doc root Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Waiting for other Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-others&entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-others"
														},
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Completed / Signed",
									"item": [
										{
											"name": "entity_type = all for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Signed Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=signed&entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "signed"
														},
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Drafts",
									"item": [
										{
											"name": "entity_type = all for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"c_11_unsent_doc is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Drafts Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=unsent&entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "unsent"
														},
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Expiring Soon",
									"item": [
										{
											"name": "entity_type = all for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is not include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is not include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is not include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is not include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is not include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is not include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is not include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is not sinclude in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json. expiration_days = 8\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_4_waiting_for_me_doc_fieldinvite is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_4_waiting_for_me_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG2_waiting_for_me is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG2_waiting_for_me\"));",
															"});",
															"pm.test(\"c_5_waiting_for_me_doc_from_dg is include in data.json. expiration_days = 7\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_5_waiting_for_me_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_9_unfinished_doc_fieldinvite is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_9_unfinished_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG4_unfinished is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG4_unfinished\"));",
															"});",
															"pm.test(\"c_10_unfinished_doc_from_dg is include in data.json. expiration_days = 3\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_10_unfinished_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_11_unsent_doc is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_11_unsent_doc\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG5_unsent is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG5_unsent\"));",
															"});",
															"pm.test(\"c_12_unsent_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_12_unsent_doc_from_dg\"));",
															"});",
															"",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    var assert = require('assert');",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Expiring Soon Sender",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_owner_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_owner_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				},
				{
					"name": "entity_type parameter for Signer",
					"item": [
						{
							"name": "Documents folder(Archive is the same)",
							"item": [
								{
									"name": "entity_type = all for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
													"});",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
													"});",
													"",
													"",
													"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
													"});",
													"",
													"",
													"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=all",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "all"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
													"});",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
													"});",
													"",
													"",
													"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
													"});",
													"",
													"",
													"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=document",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document-group for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
													"});",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
													"});",
													"",
													"",
													"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
													"});",
													"",
													"",
													"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=document-group",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document-group"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type = document-all for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
													"});",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
													"});",
													"",
													"",
													"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
													"});",
													"",
													"",
													"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=document-all",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "document-all"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "entity_type is empty = default value(document-all) for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"//Check include doc and DG in GET /folder responce",
													"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
													"});",
													"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
													"});",
													"",
													"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
													"});",
													"",
													"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
													"});",
													"",
													"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
													"});",
													"//",
													"",
													"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
													"});",
													"",
													"",
													"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
													"});",
													"",
													"",
													"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
													"});",
													"",
													"//DG and doc",
													"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
													"});",
													"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
													"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
													"});",
													"",
													"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
													"",
													"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
													"    ",
													"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
													"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
													"        });",
													"        ",
													"    } else {",
													"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
													"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
													"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
													"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
													"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
													"        });",
													"    }",
													"}"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = STRING for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=test",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "test"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = INTEGER for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 0 for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=0",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "0"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = DOUBLE for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=1.1",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "1.1"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(true) for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=true",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "true"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = boolean(false) for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=false",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "false"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = null for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=null",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": "null"
												}
											]
										}
									},
									"response": []
								},
								{
									"name": "(Negative)entity_type = 'empty' for Doc root Signer",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"//Check status code",
													"pm.test(\"Status code is 400\", function () {",
													"    pm.response.to.have.status(400);",
													"});",
													"",
													"//Responce message id 'Validation Error'",
													"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
													"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
													"    ",
													"});",
													"",
													"//Check error code",
													"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
													"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
													"",
													"});",
													"//Check error message ",
													"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
													"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
													"    ",
													"});",
													"",
													"//Check code in responce json",
													"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
													"    pm.expect(pm.response.json().code).to.eql(400);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?entity_type=",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_documents_folder_id}}"
											],
											"query": [
												{
													"key": "entity_type",
													"value": ""
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Documents sub-folder (Archive sub-folder is the same)",
							"item": [
								{
									"name": "PRECONDITION - MOVE DOC AND DG TO SUB-FOLDER",
									"item": [
										{
											"name": "Create Documents sub-folder for signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Get Documents sub-folder id\", function () {",
															"    var jsonData = pm.response.json();",
															"    pm.collectionVariables.set(\"c_signer_documents_sub_folder_id\", jsonData.id);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "POST",
												"header": [
													{
														"key": "Authorization",
														"value": "bearer {{c_signer_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "{\n    \"parent_id\": \"{{c_signer_documents_folder_id}}\",\n    \"name\": \"doc sub folder {{$timestamp}}\"\n}",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{user_url}}/folder",
													"host": [
														"{{user_url}}"
													],
													"path": [
														"folder"
													]
												}
											},
											"response": []
										},
										{
											"name": "Move all documents from Documents folder to Trash folder Copy",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_1_signed_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_arch_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_arch_from_dg}}\"\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}/documents",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}",
														"documents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Check entity-type parametr in sub-folder",
									"item": [
										{
											"name": "entity_type = all for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"//",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Doc sub-folder Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_sub_folder_id}}?entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POSTCONDITION - MOVE DOC AND DG TO DOCUMENT ROOT FOLDER",
									"item": [
										{
											"name": "Move all documents from Documents folder to Trash folder Copy 2",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_1_signed_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_arch_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_arch_from_dg}}\"\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}/documents",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}",
														"documents"
													]
												}
											},
											"response": []
										},
										{
											"name": "Delete documents sub-folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"pm.test(\"Delete c_signer_documents_sub_folder_id variable\", function () {",
															"    pm.collectionVariables.unset(\"c_signer_documents_sub_folder_id\");",
															"});",
															""
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "DELETE",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"body": {
													"mode": "raw",
													"raw": ""
												},
												"url": {
													"raw": "{{user_url}}/folder/{{c_signer_documents_sub_folder_id}}",
													"host": [
														"{{user_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_sub_folder_id}}"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Trash folder",
							"item": [
								{
									"name": "PRECONDITION - MOVE DOC AND DG FROM DOCUMENT ROOT TO TRASH",
									"item": [
										{
											"name": "Move all documents from Documents folder to Trash folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_1_signed_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_arch_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_arch_from_dg}}\"\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}/documents",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}",
														"documents"
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Check entity-type parametr in Signer Trash folder",
									"item": [
										{
											"name": "entity_type = all for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}?entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_trash_folder_id}}"
													],
													"query": [
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "POSTCONDITION - MOVE DOC AND DG FROM TRASH TO DOCUMENT ROOT",
									"item": [
										{
											"name": "Move all documents from Trash folder to Documents folder",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "PUT",
												"header": [
													{
														"key": "Authorization",
														"value": "Bearer {{c_signer_token}}",
														"type": "text"
													}
												],
												"body": {
													"mode": "raw",
													"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_1_signed_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_arch_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_8_waiting_for_others_arch_from_dg}}\"\n    }\n]",
													"options": {
														"raw": {
															"language": "json"
														}
													}
												},
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}/documents",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}",
														"documents"
													]
												}
											},
											"response": []
										}
									]
								}
							]
						},
						{
							"name": "Quick Access",
							"item": [
								{
									"name": "Waiting for me",
									"item": [
										{
											"name": "entity_type = all for Waiting for me Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Waiting for me Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Waiting for me Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is not zinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is notinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Waiting for me Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Waiting for me Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_owner_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Trash Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=waiting-for-me&entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "waiting-for-me"
														},
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								},
								{
									"name": "Expiring Soon",
									"item": [
										{
											"name": "entity_type = all for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is not sinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is not sinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=document",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "document"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-group for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is not sinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT-GROUP\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=document-group",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "document-group"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type = document-all for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is not sinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=document-all",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "document-all"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "entity_type is empty = default value(document-all) for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 200\", function () {",
															"    pm.response.to.have.status(200);",
															"});",
															"",
															"//Check include doc and DG in GET /folder responce",
															"pm.test(\"c_1_signed_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_doc_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG1_signed is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_DG1_signed\"));",
															"});",
															"pm.test(\"c_3_signed_doc_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_1_signed_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_1_signed_arch_freeform\"));",
															"});",
															"",
															"pm.test(\"c_2_signed_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_2_signed_arch_fieldinvite\"));",
															"});",
															"",
															"pm.test(\"c_6_waiting_for_others_doc_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_doc_freeform\"));",
															"});",
															"",
															"pm.test(\"c_7_waiting_for_others_doc_fieldinvite is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_7_waiting_for_others_doc_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_DG3_waiting_for_others is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_DG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_doc_from_dg is include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.include(pm.collectionVariables.get(\"c_8_waiting_for_others_doc_from_dg\"));",
															"});",
															"//",
															"",
															"pm.test(\"c_3_signed_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_3_signed_arch_from_dg\"));",
															"});",
															"",
															"",
															"pm.test(\"c_6_waiting_for_others_arch_freeform is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_6_waiting_for_others_arch_freeform\"));",
															"});",
															"",
															"",
															"pm.test(\"c_7_waiting_for_others_arch_fieldinvite is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_7_waiting_for_others_arch_fieldinvite\"));",
															"});",
															"",
															"//DG and doc",
															"pm.test(\"c_archDG3_waiting_for_others is not sinclude in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_archDG3_waiting_for_others\"));",
															"});",
															"pm.test(\"c_8_waiting_for_others_arch_from_dg is not include in data.json\", function () { ",
															"    pm.expect(pm.response.text()).to.not.include(pm.collectionVariables.get(\"c_8_waiting_for_others_arch_from_dg\"));",
															"});",
															"",
															"for(var documentOrDGObjectNumber = 0; documentOrDGObjectNumber < pm.response.json().documents.length; documentOrDGObjectNumber++){",
															"",
															"    const responceDocumentOrDGNumberData = pm.response.json().documents[documentOrDGObjectNumber];",
															"    ",
															"    if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id === null){",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Document '\" + documentName + \"' have nested property documents.document_group_info.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner === pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") Doc '\" + documentName + \"' is BROKEN and it is from old_believers\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else if(pm.response.json().documents[documentOrDGObjectNumber].document_group_name === undefined && pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_id !== null && pm.response.json().documents[documentOrDGObjectNumber].owner !== pm.collectionVariables.get(\"c_owner_email\")) {",
															"        const documentName = pm.response.json().documents[documentOrDGObjectNumber].document_name;",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_info.document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") SIGNERS doc, '\" + documentName + \"' is before \" + dgName + \" its normal when DG is in Doc go signer. Single list is not used for Signer yet\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_name\");",
															"        });",
															"        ",
															"    } else {",
															"        const dgName = pm.response.json().documents[documentOrDGObjectNumber].document_group_name;",
															"        pm.test(\"(\" + documentOrDGObjectNumber + \") DG '\" + dgName + \"' have nested property documents.document_group_name\", function () {",
															"            pm.expect(responceDocumentOrDGNumberData).to.not.have.nested.property(\"document_group_info.document_group_name\");",
															"            pm.expect(responceDocumentOrDGNumberData).to.have.nested.property(\"document_group_name\");",
															"            assert.fail(\"DOCUMENT GROUP MUST BE NOT IN DOC LIST WITH ENTITY_TYPE=DOCUMENT\");",
															"        });",
															"    }",
															"}"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = STRING for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=test",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "test"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = INTEGER for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 0 for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=0",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "0"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = DOUBLE for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=1.1",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "1.1"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(true) for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=true",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "true"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = boolean(false) for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=false",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "false"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = null for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=null",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": "null"
														}
													]
												}
											},
											"response": []
										},
										{
											"name": "(Negative)entity_type = 'empty' for Expiring Soon Signer",
											"event": [
												{
													"listen": "test",
													"script": {
														"exec": [
															"//Check status code",
															"pm.test(\"Status code is 400\", function () {",
															"    pm.response.to.have.status(400);",
															"});",
															"",
															"//Responce message id 'Validation Error'",
															"pm.test(\"(Negative)Responce message id 'Validation Error'\", function () { ",
															"    pm.expect(pm.response.json().message).to.eql(\"Validation Error\");",
															"    ",
															"});",
															"",
															"//Check error code",
															"pm.test(\"(Negative)65536 code is include in data.json\", function () {",
															"    pm.expect(pm.response.json()._message.errors[0].code).to.eql(65536);",
															"",
															"});",
															"//Check error message ",
															"pm.test(\"(Negative)Invalid value set for query param :entity_type code is include in data.json\", function () { ",
															"    pm.expect(pm.response.json()._message.errors[0].message).to.eql(\"Invalid value set for query param :entity_type\");",
															"    ",
															"});",
															"",
															"//Check code in responce json",
															"pm.test(\"(Negative)Check 400 code in responce json\", function () { ",
															"    pm.expect(pm.response.json().code).to.eql(400);",
															"});"
														],
														"type": "text/javascript"
													}
												}
											],
											"request": {
												"method": "GET",
												"header": [
													{
														"key": "authorization",
														"value": "Bearer {{c_signer_token}}"
													}
												],
												"url": {
													"raw": "{{gateway_url}}/folder/{{c_signer_documents_folder_id}}?filters=signing-status&filter-values=expire-soon&entity_type=",
													"host": [
														"{{gateway_url}}"
													],
													"path": [
														"folder",
														"{{c_signer_documents_folder_id}}"
													],
													"query": [
														{
															"key": "filters",
															"value": "signing-status"
														},
														{
															"key": "filter-values",
															"value": "expire-soon"
														},
														{
															"key": "entity_type",
															"value": ""
														}
													]
												}
											},
											"response": []
										}
									]
								}
							]
						}
					]
				}
			]
		},
		{
			"name": "POSTCONDITIONS",
			"item": [
				{
					"name": "Sender. Cancel invites and delete documents and DGs",
					"item": [
						{
							"name": "Cancel all freeform invites",
							"item": [
								{
									"name": "Cancel freeform invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/invite/{{c_6_waiting_for_others_doc_freeform_invite_id}}/cancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"invite",
												"{{c_6_waiting_for_others_doc_freeform_invite_id}}",
												"cancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel freeform invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/invite/{{c_6_waiting_for_others_arch_freeform_invite_id}}/cancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"invite",
												"{{c_6_waiting_for_others_arch_freeform_invite_id}}",
												"cancel"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cancel all field invites",
							"item": [
								{
									"name": "Cancel field invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_4_waiting_for_me_doc_fieldinvite}}/fieldinvitecancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_4_waiting_for_me_doc_fieldinvite}}",
												"fieldinvitecancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel field invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_7_waiting_for_others_doc_fieldinvite}}/fieldinvitecancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_7_waiting_for_others_doc_fieldinvite}}",
												"fieldinvitecancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel field invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_9_unfinished_doc_fieldinvite}}/fieldinvitecancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_9_unfinished_doc_fieldinvite}}",
												"fieldinvitecancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel field invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_4_waiting_for_me_arch_fieldinvite}}/fieldinvitecancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_4_waiting_for_me_arch_fieldinvite}}",
												"fieldinvitecancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel field invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_7_waiting_for_others_arch_fieldinvite}}/fieldinvitecancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_7_waiting_for_others_arch_fieldinvite}}",
												"fieldinvitecancel"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel field invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/document/{{c_9_unfinished_arch_fieldinvite}}/fieldinvitecancel",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"document",
												"{{c_9_unfinished_arch_fieldinvite}}",
												"fieldinvitecancel"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Cancel all DG invites",
							"item": [
								{
									"name": "Cancel DG invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup/{{c_DG2_waiting_for_me}}/groupinvite/{{c_DG2_waiting_for_me_invite_id}}/cancelinvite",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup",
												"{{c_DG2_waiting_for_me}}",
												"groupinvite",
												"{{c_DG2_waiting_for_me_invite_id}}",
												"cancelinvite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel DG invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup/{{c_DG3_waiting_for_others}}/groupinvite/{{c_DG3_waiting_for_others_invite_id}}/cancelinvite",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup",
												"{{c_DG3_waiting_for_others}}",
												"groupinvite",
												"{{c_DG3_waiting_for_others_invite_id}}",
												"cancelinvite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel DG invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup/{{c_DG4_unfinished}}/groupinvite/{{c_DG4_unfinished_invite_id}}/cancelinvite",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup",
												"{{c_DG4_unfinished}}",
												"groupinvite",
												"{{c_DG4_unfinished_invite_id}}",
												"cancelinvite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel DG invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup/{{c_archDG2_waiting_for_me}}/groupinvite/{{c_archDG2_waiting_for_me_invite_id}}/cancelinvite",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup",
												"{{c_archDG2_waiting_for_me}}",
												"groupinvite",
												"{{c_archDG2_waiting_for_me_invite_id}}",
												"cancelinvite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel DG invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup/{{c_archDG3_waiting_for_others}}/groupinvite/{{c_archDG3_waiting_for_others_invite_id}}/cancelinvite",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup",
												"{{c_archDG3_waiting_for_others}}",
												"groupinvite",
												"{{c_archDG3_waiting_for_others_invite_id}}",
												"cancelinvite"
											]
										}
									},
									"response": []
								},
								{
									"name": "Cancel DG invite",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"client_timestamp\": {{$timestamp}}\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/documentgroup/{{c_archDG4_unfinished}}/groupinvite/{{c_archDG4_unfinished_invite_id}}/cancelinvite",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"documentgroup",
												"{{c_archDG4_unfinished}}",
												"groupinvite",
												"{{c_archDG4_unfinished_invite_id}}",
												"cancelinvite"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Move all documents and templates to Trash folder",
							"item": [
								{
									"name": "Move all documents from Documents folder to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_4_waiting_for_me_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_9_unfinished_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_11_unsent_doc}}\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}/documents",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move all documents from Archive folder to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_4_waiting_for_me_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_6_waiting_for_others_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_7_waiting_for_others_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_9_unfinished_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_11_unsent_arch}}\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}/documents",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}",
												"documents"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move all templates from Templates folder to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"{{c_template_for_documents_id}}\"\n    },\n    {\n        \"unique_id\": \"{{c_template_2_id}}\"\n    },\n    {\n        \"unique_id\": \"{{c_template_3_id}}\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_owner_trash_folder_id}}/documents",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_trash_folder_id}}",
												"documents"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Move all DGs to Trash folder",
							"item": [
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_DG1_signed}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_DG1_signed}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_DG2_waiting_for_me}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_DG2_waiting_for_me}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_DG3_waiting_for_others}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_DG3_waiting_for_others}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_DG4_unfinished}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_DG4_unfinished}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_DG5_unsent}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_DG5_unsent}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_archDG1_signed}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_archDG1_signed}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_archDG2_waiting_for_me}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_archDG2_waiting_for_me}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_archDG3_waiting_for_others}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_archDG3_waiting_for_others}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_archDG4_unfinished}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_archDG4_unfinished}}",
												"move"
											]
										}
									},
									"response": []
								},
								{
									"name": "Move DG to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "POST",
										"header": [
											{
												"key": "Authorization",
												"value": "bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "{\n    \"folder_id\": \"{{c_owner_trash_folder_id}}\"\n}",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/v2/document-groups/{{c_archDG5_unsent}}/move",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"document-groups",
												"{{c_archDG5_unsent}}",
												"move"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete all documents and DGs from Trash",
							"item": [
								{
									"name": "Empty Trash Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/v2/trash",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"trash"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check that folders are empty",
							"item": [
								{
									"name": "Check that folders are empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check that Documents root folder is empty\", function () {",
													"    var docsObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_owner_documents_folder_id\"));",
													"    pm.expect(docsObj.document_count).to.eql(\"0\");",
													"    pm.expect(docsObj.template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Documents sub-folder is empty\", function () {",
													"    var docsObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_owner_documents_folder_id\"));",
													"    pm.expect(docsObj.sub_folders[0].document_count).to.eql(\"0\");",
													"    pm.expect(docsObj.sub_folders[0].template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Archive root folder is empty\", function () {",
													"    var archiveObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_owner_archive_folder_id\"));",
													"    pm.expect(archiveObj.document_count).to.eql(\"0\");",
													"    pm.expect(archiveObj.template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Archive sub-folder is empty\", function () {",
													"    var archiveObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_owner_archive_folder_id\"));",
													"    pm.expect(archiveObj.sub_folders[0].document_count).to.eql(\"0\");",
													"    pm.expect(archiveObj.sub_folders[0].template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Templates root folder is empty\", function () {",
													"    var templateObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_owner_templates_folder_id\"));",
													"    pm.expect(templateObj.document_count).to.eql(\"0\");",
													"    pm.expect(templateObj.template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Templates sub-folder is empty\", function () {",
													"    var templateObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_owner_templates_folder_id\"));",
													"    pm.expect(templateObj.sub_folders[0].document_count).to.eql(\"0\");",
													"    pm.expect(templateObj.sub_folders[0].template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Trash folder is empty\", function () {",
													"    var trashObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_owner_trash_folder_id\"));",
													"    pm.expect(trashObj.document_count).to.eql(\"0\");",
													"    pm.expect(trashObj.template_count).to.eql(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_owner_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{user_url}}/folder?subfolder-data=1&with_team_documents=true&include_documents_subfolders=false",
											"host": [
												"{{user_url}}"
											],
											"path": [
												"folder"
											],
											"query": [
												{
													"key": "subfolder-data",
													"value": "1"
												},
												{
													"key": "with_team_documents",
													"value": "true"
												},
												{
													"key": "include_documents_subfolders",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete sub-folders",
							"item": [
								{
									"name": "Delete documents sub-folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{user_url}}/folder/{{c_owner_documents_sub_folder_id}}",
											"host": [
												"{{user_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_documents_sub_folder_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete archive sub-folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{user_url}}/folder/{{c_owner_archive_sub_folder_id}}",
											"host": [
												"{{user_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_archive_sub_folder_id}}"
											]
										}
									},
									"response": []
								},
								{
									"name": "Delete template sub-folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_owner_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{user_url}}/folder/{{c_owner_templates_sub_folder_id}}",
											"host": [
												"{{user_url}}"
											],
											"path": [
												"folder",
												"{{c_owner_templates_sub_folder_id}}"
											]
										}
									},
									"response": []
								}
							]
						}
					]
				},
				{
					"name": "Signer. Cancel invites and delete documents and DGs",
					"item": [
						{
							"name": "Move all documents and templates to Trash folder",
							"item": [
								{
									"name": "Move all documents from Documents folder to Trash folder",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "PUT",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_signer_token}}",
												"type": "text"
											}
										],
										"body": {
											"mode": "raw",
											"raw": "[\n    {\n        \"unique_id\": \"{{c_1_signed_doc_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_doc_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_doc_from_dg}}\"\n    },\n    {\n        \"unique_id\": \"{{c_1_signed_arch_freeform}}\"\n    },\n    {\n        \"unique_id\": \"{{c_2_signed_arch_fieldinvite}}\"\n    },\n    {\n        \"unique_id\": \"{{c_3_signed_arch_from_dg}}\"\n    }\n]",
											"options": {
												"raw": {
													"language": "json"
												}
											}
										},
										"url": {
											"raw": "{{gateway_url}}/folder/{{c_signer_trash_folder_id}}/documents",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"folder",
												"{{c_signer_trash_folder_id}}",
												"documents"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Delete all documents and DGs from Trash",
							"item": [
								{
									"name": "Empty Trash Owner",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 204\", function () {",
													"    pm.response.to.have.status(204);",
													"});",
													""
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "DELETE",
										"header": [
											{
												"key": "Authorization",
												"value": "Bearer {{c_signer_token}}"
											}
										],
										"body": {
											"mode": "raw",
											"raw": ""
										},
										"url": {
											"raw": "{{gateway_url}}/v2/trash",
											"host": [
												"{{gateway_url}}"
											],
											"path": [
												"v2",
												"trash"
											]
										}
									},
									"response": []
								}
							]
						},
						{
							"name": "Check that folders are empty",
							"item": [
								{
									"name": "Check that folders are empty",
									"event": [
										{
											"listen": "test",
											"script": {
												"exec": [
													"pm.test(\"Status code is 200\", function () {",
													"    pm.response.to.have.status(200);",
													"});",
													"",
													"var jsonData = pm.response.json();",
													"",
													"pm.test(\"Check that Documents root folder is empty\", function () {",
													"    var docsObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_signer_documents_folder_id\"));",
													"    pm.expect(docsObj.document_count).to.eql(\"0\");",
													"    pm.expect(docsObj.template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Archive root folder is empty\", function () {",
													"    var archiveObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_signer_archive_folder_id\"));",
													"    pm.expect(archiveObj.document_count).to.eql(\"0\");",
													"    pm.expect(archiveObj.template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Templates root folder is empty\", function () {",
													"    var templateObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_signer_template_folder_id\"));",
													"    pm.expect(templateObj.document_count).to.eql(\"0\");",
													"    pm.expect(templateObj.template_count).to.eql(\"0\");",
													"});",
													"",
													"pm.test(\"Check that Trash folder is empty\", function () {",
													"    var trashObj = jsonData.folders.find(item => item.id === pm.collectionVariables.get(\"c_signer_trash_folder_id\"));",
													"    pm.expect(trashObj.document_count).to.eql(\"0\");",
													"    pm.expect(trashObj.template_count).to.eql(\"0\");",
													"});"
												],
												"type": "text/javascript"
											}
										}
									],
									"request": {
										"method": "GET",
										"header": [
											{
												"key": "authorization",
												"value": "Bearer {{c_signer_token}}"
											},
											{
												"key": "Content-Type",
												"value": "application/x-www-form-urlencoded",
												"type": "text"
											}
										],
										"url": {
											"raw": "{{user_url}}/folder?subfolder-data=1&with_team_documents=true&include_documents_subfolders=false",
											"host": [
												"{{user_url}}"
											],
											"path": [
												"folder"
											],
											"query": [
												{
													"key": "subfolder-data",
													"value": "1"
												},
												{
													"key": "with_team_documents",
													"value": "true"
												},
												{
													"key": "include_documents_subfolders",
													"value": "false"
												}
											]
										}
									},
									"response": []
								}
							]
						}
					]
				}
			]
		}
	],
	"event": [
		{
			"listen": "prerequest",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		},
		{
			"listen": "test",
			"script": {
				"type": "text/javascript",
				"exec": [
					""
				]
			}
		}
	],
	"variable": [
		{
			"key": "c_owner_email",
			"value": "signnowq+sendergetfolder@gmail.com",
			"type": "string"
		},
		{
			"key": "c_owner_password",
			"value": "s1gnn(0)W",
			"type": "string"
		},
		{
			"key": "c_signer_email",
			"value": "signnowq+signergetfolder@gmail.com",
			"type": "string"
		},
		{
			"key": "c_signer_password",
			"value": "s1gnn(0)W",
			"type": "string"
		},
		{
			"key": "c_signer_signature",
			"value": "iVBORw0KGgoAAAANSUhEUgAAAO4AAABXCAQAAACpIrEUAAAABGdBTUEAALGPC/xhBQAAACBjSFJNAAB6JgAAgIQAAPoAAACA6AAAdTAAAOpgAAA6mAAAF3CculE8AAAAAmJLR0QAAKqNIzIAAAAHdElNRQflBxMLIBIQub77AAAKCUlEQVR42u2de3yMVxrHv4lJBKEkIVJUka5dt0pLKWrd72VLi7bs1iVtacWlLkt3tdu1RUsR2uJjaeyusm1dUtbHpZSECOq2tlHCujRVhEg1chtz9g8jn5nMO8m8M+91vd/8dc57zvM855d53znvuU0QFmYiiDg60IZY6lOVEG6QTRap7OEARZ6FLcxCU+IZhJ3tpHKKC+QSTA2ieJQ2dOcBlvAx1/UO0kIuQTzHXgpZyZNeyzzFGnKJ1ztUC3n05SgFfEBMuSVbk86X1NA7YAvfeIRdCFZTz8fywbzFMSL0DtuiPGxMI5+TdJBZbyR7sOkdvEVZ1GM/duZQ0Y+6f+EPeodv4Z0+ZJNFRz9rh3CSaL2bYCHNDBzspGYAFiYzXe9GWHhiYzmCJQF+azbngN4NsShNFbbiYHzAdiqTT7DejbFwpQp7KGSIApYqI6wXIiMRzl4K6KuIrUcQ1mCGcahMKvn0VMjaKAr1bpDFPWxsoYh+itnbTrreTbK4xyruMFgxa20R/FnvJlnc5V0ECYpZC+UIdh7Wu1EWAMMQzFfQXiKCT/RulAVAK/JJVvCddDqCq0Tp3SwLqM0lTlJVMXszEdjprXezLMBGCjk0UshaGKsRCF7Wu1kWAPNx0F8hW805icDOK3o3ygKgNw7mKGIplBnkI7hhPZCNQU2ukKbIioluZCAQbPZhlZWFJqwnlwYBW3mMbQgEp3hW7wZZ3OO3CF4M0EYsn+JAkMEIKujdIIt71CWHzwOy0IIkihHspI+1scA4RDGYNH4MYJihG9sQ3GYVLfRujMU9QhjCCqYwA8EgvyxEMZ4TCA4zhgf0bo43YniNDZzjNrnsuk/6eJ1IYSQ2IrjCF7LVsfE06yniRxJpqXdTvNOYRObTkXCq0ZdUBH/SOyQNmEgadQBYRQ61ZagzhyH8nRtksZiORl4XVY2P2OB2pwbzxn1w5z7HQaoB0LmM4UF3dcLowHROU0g6s2hv9G5TDy7ypt5B6EI8QwEI4zTpXu6+u+pUJo4XeJ/93OY4S3nWHCuhEsi/b1+0I9hNAj1YhIO2ANgIJ5I6NKIV/RjNFux8wzl+5jhrmcxTVNE7aN+ZRiED9A5CR5qwgu8QFFCEQFDMLbL5nkzS2UQ6dpbSg/pGf/hKEY8j4PEY87OQQmIl8k2tzm+wW7vO+AVFzJPIN7U6zcljg95BGIBksqnukWtqdaqTyVlFR1MieZrZ7OY7rpOj8WuU/747IXhNA3U0JRm7s3/oG790vg9KUYlGNOBBbNSmOx/wIY0VjVU930Ec4ozE3K1cdQzFOARvl1kihNGk8hO3+Jb1bOYWv5IsF00Xyc5IIGjn+3mExPau8tUxJHc79M3I5yghZZTrxos0pBK/5iwCgeCPEqUiGUdXxWNU23dTlnOeQq6QwmWOuLzk+KqOIalNMXZu43CK5vp3s6Q5tZjIQyV1RiAQHPZ4dFVgPHMUXPqpje96vEM89QilGVkIhMsGL9/UMTD9uYJAsNLrcR1P8RFhJakqnEBQQJNSpVqw18/JsbJQ13cQY5ng8k86iCBVpjoGZxCCG163/45grdvCkLUIBNNKlRrJZVopHpm6viNIcnuMD+MnBN1lqWN4liCY4OXaNHa7fWZnkMweTpR6LE7F4SFK4KjrO44Ut150dybwHodkqWN4GlLEaS/fHzM54/YyP5B0+uGgnVupXgi+LMNDMHFMZBPrZMWlru/eHHE76a01C4HTHv3kstQxAWsQPCN55ffcoqlL+gnSqMlxlpUqdwDBW5IWgmjHQrLIYAkDZT3a1PX9Muep75JuzEpsPMklj5WJ3tUxAXE42Ct5ZTSCl1zSseykFvFc9Zi1vIlgo0f9erzDJS7wrkf3p3zU9T2FHLf8pnxKJWAxM31WxxRsw8ETEvldKWaTS7oO64gglIsSB8l+haCw1J2QRBGb6erXtJi6vqfgcDvy4DG+oAoQTJbHkZze1DEFXRD8TSK/LtfIo25JOpolVAXG8h+JJdVDEQjWOlO1WU4eK/y4X7XwPRrBbJd0ez5zTrV34Gsf1TEFQRzituQBsl8hXB5RMbxNKFCRS84lKKXZgUDwKhUYz02S3O4kuajpuxPFZLj0wIezsqSzNJdxPqpjCp5HMEsifziCmyUD8w0Y5XzAjeCsl60QMVxF4CCTfwW4+FpN31H8gKCXMxXMHOa6PLqP0dAndUxBRc6RRbhHfgX+i2CxM9XcZTDuKBO9Wrs7LHgnwHkTdX3/FVHyHhvFRreVjTW46JM6JuENL9ubeiEQjAKgM81K8h+n0Ou2iv5ksweBYF9AManpuz52BJMA6MFRurhd7cZ6n9QxBZHksE+yP/k+AsEC6jLUTdBFXgYhbMzjMj2BdQhEGfOs5aOm7wSn7WgW8DUPlrr6ils3y7s6puBD7ngZj01CIMgrddZSEFmSg3wxpLKVWgCMRLAjoKjU9D3bOZtziwSJ1chj3IYYvatjApphZ7mXa0P5mc0eB3u054KEJG34gVkEAUH04SKfB7gMRU3fcWSSyyKPe/Yu7Vhc8g1bljomYAfXiZRVY4HEasD+5JNMJVoynQxS6QoMVmGHjDa+l5asm5KvjoEY6McROedo75GXzTUyKSCDRFoD0JtXVYhXW9/+qGMYKnOegzI/4w25LFGj9GqIR1mhQrza+vZHHQMxy4/Owmg+LrdMQ7aqsmdGW9/+qGMYYilgkexaa8o9XbgR+1QaqtPSt3/qGIbtXPJjGVlmOXWacEThdcn6+PZPHYMwDOHH/r1qHCnzek9OqXach5a+/VPHIERy1a+9Lk3LOBE4iKl8q8ABXPr79lcdhZA6ni4UQbGP9edhY6xfnr39jG80n1CBjmSr2OpAfGujjipEM5lhPp9I2BPBC375CSdJMn84V5ip8muD/761UkcFgkhgrozuf3W+LzXvIYdlHrvk2pPKGU02RvnjW1t1FKYqG/idrBqrueYcYveHGiTyEg8RSk3aMpXD5DHTZSeAmsj3rbU6ihLBQZk/fTIAwcAAvXYimasUk80uJml8bosc3/qooxCV2C/zEKG6XCNR77A1wuTqLGO/rGlkGyl8Q6jeYWuEqdXphnDOgvjKbHIV+9kFo2NyddLYJat8X+4Y5ftEA0ytTmMEw2SUb0bufXTIn8nVeR2HjH5qLc6zWu+QNcTk6izktM9lw9jPXqN0FTTB1OrYiOGSj2VD+YxwOlOkd9AaYmp1gsnD4VPJEP7Jw3T1Ouj+/4mp1Qkmw6ctVjbWEksXrukdsMaYXJ2WiHKP0KrKVo4aZaRUU0yvThr/KPN6Y/7NFvNuYAoQk6vThkKvZ5gH8zo3edO8CzMDxvTqjKJIYtF0MM9wjAM8rnd4OmN6dfqSxSHG0JxqhBBDD97jAikMMO++NAUxvTphjGAjFymmgPMkM6nUrvD7G1Oq8z+A/MCN+bghwQAAACV0RVh0ZGF0ZTpjcmVhdGUAMjAyMS0wNy0xOVQxMTozMjoxOCswMDowMCmcjNIAAAAldEVYdGRhdGU6bW9kaWZ5ADIwMjEtMDctMTlUMTE6MzI6MTgrMDA6MDBYwTRuAAAAAElFTkSuQmCC",
			"type": "string"
		},
		{
			"key": "c_owner_token",
			"value": ""
		},
		{
			"key": "c_signer_token",
			"value": ""
		},
		{
			"key": "c_owner_documents_folder_id",
			"value": ""
		},
		{
			"key": "c_owner_archive_folder_id",
			"value": ""
		},
		{
			"key": "c_owner_templates_folder_id",
			"value": ""
		},
		{
			"key": "c_owner_trash_folder_id",
			"value": ""
		},
		{
			"key": "c_signer_documents_folder_id",
			"value": ""
		},
		{
			"key": "c_signer_archive_folder_id",
			"value": ""
		},
		{
			"key": "c_signer_template_folder_id",
			"value": ""
		},
		{
			"key": "c_signer_trash_folder_id",
			"value": ""
		},
		{
			"key": "c_owner_documents_sub_folder_id",
			"value": ""
		},
		{
			"key": "c_owner_archive_sub_folder_id",
			"value": ""
		},
		{
			"key": "c_owner_templates_sub_folder_id",
			"value": ""
		},
		{
			"key": "c_template_for_documents_id",
			"value": ""
		},
		{
			"key": "c_1_signed_doc_freeform",
			"value": ""
		},
		{
			"key": "c_1_signed_doc_freeform_invite_id",
			"value": ""
		},
		{
			"key": "c_2_signed_doc_fieldinvite",
			"value": ""
		},
		{
			"key": "c_2_signed_doc_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_2_signed_doc_fieldinvite_field_request_id",
			"value": ""
		},
		{
			"key": "c_3_signed_doc_from_dg",
			"value": ""
		},
		{
			"key": "c_DG1_signed",
			"value": ""
		},
		{
			"key": "c_DG1_signed_invite_id",
			"value": ""
		},
		{
			"key": "c_3_signed_doc_from_dg_field_request_id",
			"value": ""
		},
		{
			"key": "c_4_waiting_for_me_doc_fieldinvite",
			"value": ""
		},
		{
			"key": "c_4_waiting_for_me_doc_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_5_waiting_for_me_doc_from_dg",
			"value": ""
		},
		{
			"key": "c_DG2_waiting_for_me",
			"value": ""
		},
		{
			"key": "c_6_waiting_for_others_doc_freeform",
			"value": ""
		},
		{
			"key": "c_7_waiting_for_others_doc_fieldinvite",
			"value": ""
		},
		{
			"key": "c_7_waiting_for_others_doc_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_8_waiting_for_others_doc_from_dg",
			"value": ""
		},
		{
			"key": "c_DG3_waiting_for_others",
			"value": ""
		},
		{
			"key": "c_9_unfinished_doc_fieldinvite",
			"value": ""
		},
		{
			"key": "c_9_unfinished_doc_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_9_unfinished_doc_fieldinvite_invite_id",
			"value": ""
		},
		{
			"key": "c_9_unfinished_doc_fieldinvite_field_request_id",
			"value": ""
		},
		{
			"key": "c_10_unfinished_doc_from_dg",
			"value": ""
		},
		{
			"key": "c_DG4_unfinished",
			"value": ""
		},
		{
			"key": "c_10_unfinished_doc_from_dg_field_invites_id",
			"value": ""
		},
		{
			"key": "c_10_unfinished_doc_from_dg_field_request_id",
			"value": ""
		},
		{
			"key": "c_11_unsent_doc",
			"value": ""
		},
		{
			"key": "c_12_unsent_doc_from_dg",
			"value": ""
		},
		{
			"key": "c_DG5_unsent",
			"value": ""
		},
		{
			"key": "c_1_signed_arch_freeform",
			"value": ""
		},
		{
			"key": "c_1_signed_arch_freeform_invite_id",
			"value": ""
		},
		{
			"key": "c_2_signed_arch_fieldinvite",
			"value": ""
		},
		{
			"key": "c_2_signed_arch_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_2_signed_arch_fieldinvite_field_request_id",
			"value": ""
		},
		{
			"key": "c_3_signed_arch_from_dg",
			"value": ""
		},
		{
			"key": "c_archDG1_signed",
			"value": ""
		},
		{
			"key": "c_archDG1_signed_invite_id",
			"value": ""
		},
		{
			"key": "c_3_signed_arch_from_archDG_field_request_id",
			"value": ""
		},
		{
			"key": "c_4_waiting_for_me_arch_fieldinvite",
			"value": ""
		},
		{
			"key": "c_4_waiting_for_me_arch_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_5_waiting_for_me_arch_from_dg",
			"value": ""
		},
		{
			"key": "c_archDG2_waiting_for_me",
			"value": ""
		},
		{
			"key": "c_6_waiting_for_others_arch_freeform",
			"value": ""
		},
		{
			"key": "c_7_waiting_for_others_arch_fieldinvite",
			"value": ""
		},
		{
			"key": "c_7_waiting_for_others_arch_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_8_waiting_for_others_arch_from_dg",
			"value": ""
		},
		{
			"key": "c_archDG3_waiting_for_others",
			"value": ""
		},
		{
			"key": "c_9_unfinished_arch_fieldinvite",
			"value": ""
		},
		{
			"key": "c_9_unfinished_arch_fieldinvite_role_id",
			"value": ""
		},
		{
			"key": "c_9_unfinished_arch_fieldinvite_invite_id",
			"value": ""
		},
		{
			"key": "c_9_unfinished_arch_fieldinvite_field_request_id",
			"value": ""
		},
		{
			"key": "c_10_unfinished_arch_from_dg",
			"value": ""
		},
		{
			"key": "c_archDG4_unfinished",
			"value": ""
		},
		{
			"key": "c_10_unfinished_arch_from_archDG_field_invites_id",
			"value": ""
		},
		{
			"key": "c_10_unfinished_arch_from_archDG_field_request_id",
			"value": ""
		},
		{
			"key": "c_11_unsent_arch",
			"value": ""
		},
		{
			"key": "c_12_unsent_arch_from_dg",
			"value": ""
		},
		{
			"key": "c_archDG5_unsent",
			"value": ""
		},
		{
			"key": "c_template_2_id",
			"value": ""
		},
		{
			"key": "c_template_3_id",
			"value": ""
		},
		{
			"key": "c_template_4_trash_id",
			"value": ""
		},
		{
			"key": "c_template_5_trash_id",
			"value": ""
		},
		{
			"key": "c_1_unsent_trash",
			"value": ""
		},
		{
			"key": "c_2_unsent_trash",
			"value": ""
		},
		{
			"key": "c_3_unsent_trash_from_dg",
			"value": ""
		},
		{
			"key": "c_trashDG6_unsent",
			"value": ""
		},
		{
			"key": "c_4_unsent_trash_from_dg",
			"value": ""
		},
		{
			"key": "c_trashDG7_unsent",
			"value": ""
		},
		{
			"key": "c_DG2_waiting_for_me_invite_id",
			"value": ""
		},
		{
			"key": "c_DG3_waiting_for_others_invite_id",
			"value": ""
		},
		{
			"key": "c_DG4_unfinished_invite_id",
			"value": ""
		},
		{
			"key": "c_archDG2_waiting_for_me_invite_id",
			"value": ""
		},
		{
			"key": "c_archDG3_waiting_for_others_invite_id",
			"value": ""
		},
		{
			"key": "c_archDG4_unfinished_invite_id",
			"value": ""
		},
		{
			"key": "c_6_waiting_for_others_doc_freeform_invite_id",
			"value": ""
		},
		{
			"key": "c_6_waiting_for_others_arch_freeform_invite_id",
			"value": ""
		}
	]
}